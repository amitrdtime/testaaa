trigger:
  branches:
    include:
      - development

variables:
  - group: "innoveraiautoagents-build"
  - name: vmImageName
    value: "ubuntu-latest"
  - name: appName
    value: "email-trigger"
  - name: workingDirectory
    value: "./"
  - name: functionAppName
    value: "$(azure-function-app-name-prenote-agent)"
  - name: isDev
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/development')]

parameters:
  - name: ForceDevBuild
    type: boolean
    default: true
    displayName: "Force Development Build"     

stages:
  - stage: Build
    displayName: Build & Artifact

    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)

        steps:
          - bash: |
              if [ -f extensions.csproj ]
              then
                  dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
              fi
            workingDirectory: $(workingDirectory)
            displayName: "Build extensions"

          - task: UsePythonVersion@0
            displayName: "Use Python 3.11"
            inputs:
              versionSpec: 3.11 # Functions V2 supports Python 3.6 as of today

          - bash: |
              pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
            workingDirectory: $(workingDirectory)
            displayName: "Install application dependencies"

          # - script: |
          #     echo "Running unit tests"
          #     source ./.python_packagees/bin/activate
          #     pip install -r requirements.txt
          #     pip install pytest pytest-azurepipelines
          #     pip install pytest-cov
          #     mkdir htmlcov
          #     pytest tests --junitxml=junit/test-results.xml --cov=src --cov-report=xml --cov-report=html
          #   displayName: "Unit tests"

          # - task: PublishCodeCoverageResults@1
          #   displayName: "Publish test results"
          #   inputs:
          #     codeCoverageTool: Cobertura
          #     summaryFileLocation: "$(workingDirectory)/coverage.xml"
          #     reportDirectory: "$(workingDirectory)/htmlcov"

          # - task: PublishTestResults@2
          #   displayName: "Publish test results"
          #   inputs:
          #     testResultsFiles: "**/junit/test-*.xml"
          #     testRunTitle: "Unit tests"

          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(workingDirectory)"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop

          - script: |
              cp $(workingDirectory)/.doc/api.yaml $(Build.ArtifactStagingDirectory)/api.yaml
            displayName: "Copying API.yaml"

          - task: UniversalPackages@0
            displayName: "Artifact to Universal Package"
            inputs:
              command: "publish"
              publishDirectory: "$(Build.ArtifactStagingDirectory)"
              vstsFeedPublish: "innosense-feeds"
              vstsFeedPackagePublish: "innosense-$(appName)"
              packagePublishDescription: "Backend Artifact"


# ======================================================= DEVELOPMENT =======================================================            

  - stage: DeployDev
    displayName: Deploy Dev Stage
    dependsOn: Build
    condition: or(eq('${{ parameters.ForceDevBuild }}', true), and(succeeded(), eq(variables.isDev, true)))

    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: "development"
        pool:
          vmImage: $(vmImageName)

        strategy:
          runOnce: 
            deploy:
              steps:
                - template: ./templates/deployTemplate.yaml
                  parameters:
                    env: "dev"
                    functionAppName: "$(functionAppName)"
                    azureSubscription: "$(service-connection)"

  # - stage: DeployDEVAPI
  #   displayName: Deploy Dev APIM APIs
  #   dependsOn: DeployDev
  #   condition: succeeded()
